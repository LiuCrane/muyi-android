apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //阿里路由框架配置
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
        ndk {
            //设置支持的SO库架构
            abiFilters "arm64-v8a", "armeabi-v7a", "x86"
        }
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除alone文件夹下所有调试文件
                    exclude 'src/main/alone/*'
                }
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled true
    }
}
dependencies {
    api fileTree(dir: "libs", include: ["*.jar"])
    //rxandroid
    api rootProject.ext.dependencies.rxandroid
    //rx管理View的生命周期
    api(rootProject.ext.dependencies.rxlifecycle) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["rxlifecycle-components"]) {
        exclude group: 'com.android.support'
    }
    api rootProject.ext.androidx["design"]
    //rxbinding
    api(rootProject.ext.dependencies.rxbinding) {
        exclude group: 'com.android.support'
    }
    //network
    api rootProject.ext.dependencies.okhttp
    api rootProject.ext.dependencies.retrofit
    api rootProject.ext.dependencies["converter-gson"]
    api rootProject.ext.dependencies["adapter-rxjava"]
    //json解析
    api rootProject.ext.dependencies.gson
    //glide图片加载库
    api(rootProject.ext.dependencies.glide) {
        exclude group: 'com.android.support'
    }
    api rootProject.ext.dependencies["glide-transfer"]
    kapt rootProject.ext.dependencies["glide-compiler"]

    //Google LiveData/ViewModel/App Startup组件
    api rootProject.ext.dependencies["lifecycle-extensions"]
    kapt rootProject.ext.dependencies["lifecycle-compiler"]

    api rootProject.ext.dependencies["toolbar"]
    api rootProject.ext.dependencies["viewpager2"]
    api rootProject.ext.androidx["constraintlayout"]
    api rootProject.ext.androidx["appcompat"]
    api rootProject.ext.androidx["junit"]
    api rootProject.ext.androidx["runner"]
    api rootProject.ext.androidx["espresso-core"]
    api rootProject.ext.androidx["lifecycle-extensions"]
    api rootProject.ext.androidx["multidex"]
    api rootProject.ext.androidx["kotlin_lib"]
    api rootProject.ext.androidx["kotlin_core"]
    api rootProject.ext.dependencies["arouter_api"]
    api rootProject.ext.dependencies["arouter_compiler"]
    api rootProject.ext.dependencies["koin_core"]
    api rootProject.ext.dependencies["utils"]
    api rootProject.ext.dependencies["mmkv"]
    api rootProject.ext.dependencies["livebus"]
    api rootProject.ext.dependencies["fragmentationx"]
    api rootProject.ext.dependencies["permissionx"]
    api rootProject.ext.dependencies["toast"]
    api rootProject.ext.dependencies["autosize"]
    api rootProject.ext.dependencies["navigation"]
    api rootProject.ext.dependencies["xpopup"]
    api rootProject.ext.dependencies["MagicIndicator"]
    api rootProject.ext.dependencies["round_imageview"]
    api rootProject.ext.dependencies["refresh-header"]
    api rootProject.ext.dependencies["refresh-footer-ball"]
    api rootProject.ext.dependencies["refresh-footer-classic"]
    api rootProject.ext.dependencies["refresh"]
    api rootProject.ext.dependencies["adapter-helper"]
    api rootProject.ext.dependencies["loadsir"]


    //视频GSYVideoPlayer
    api rootProject.ext.dependencies["gsyVideoPlayer-java"]
    //更多ijk的编码支持
    api rootProject.ext.dependencies["gsyVideoPlayer-ex_so"]
    //根据你的需求ijk模式的so
//    api rootProject.ext.dependencies["gsyVideoPlayer-arm64"]
//    api rootProject.ext.dependencies["gsyVideoPlayer-armv7a"]
//    api rootProject.ext.dependencies["gsyVideoPlayer-armv5"]
//    api rootProject.ext.dependencies["gsyVideoPlayer-x86"]
//    api rootProject.ext.dependencies["gsyVideoPlayer-x64"]
    //是否需要ExoPlayer模式
    //    api 'com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer-exo2:v8.3.3-release-jitpack'
    //是否需要AliPlayer模式
    //    api 'com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer-aliplay:v8.3.3-release-jitpack'

    debugApi rootProject.ext.dependencies["leakcanary"]
    api "com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava"

}